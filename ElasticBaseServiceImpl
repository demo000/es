package com.concom.yunzq.impl.service.elastic;

import com.concom.lang.Page;
import com.concom.yunzq.constant.Constant;
import com.concom.yunzq.constant.ElasticConstant;
import com.concom.yunzq.domain.project.po.ProjectBaseInfo;
import com.concom.yunzq.domain.user.po.User;
import com.concom.yunzq.impl.dao.project.ProjectBaseInfoDao;
import com.concom.yunzq.req.elastic.ElasticReq;
import com.concom.yunzq.vo.elastic.SuggestVO;
import com.concom.yunzq.service.elastic.ElasticBaseService;
import com.concom.yunzq.service.materiallib.IRationLibService;
import com.concom.yunzq.service.user.IUserService;
import com.concom.yunzq.util.ElasticFieldTypeEnum;
import com.concom.yunzq.util.StringUtil;
import com.concom.yunzq.vo.ESSearchIndex;
import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;
import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;
import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;
import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;
import org.elasticsearch.action.admin.indices.exists.types.TypesExistsRequest;
import org.elasticsearch.action.admin.indices.exists.types.TypesExistsResponse;
import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;
import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;
import org.elasticsearch.action.bulk.BulkItemResponse;
import org.elasticsearch.action.bulk.BulkRequestBuilder;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.*;
import org.elasticsearch.client.Requests;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.text.Text;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.QueryStringQueryBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.bucket.terms.Terms;
import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;
import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;
import org.elasticsearch.search.fetch.subphase.highlight.HighlightField;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.io.IOException;
import java.util.*;

import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;

/**
 * @author mr.p
 */
@Service
public class ElasticBaseServiceImpl implements ElasticBaseService {

    //一次导入最大条数
    @Value("${elastic.maxBatchCount}")
    private int maxBatchCount;

    @Value("${elastic.profiles.active}")
    protected String env;

    @Autowired
    private TransportClient transportClient;
    @Autowired
    private IUserService userService;
    @Autowired
    private ProjectBaseInfoDao projectBaseInfoDao;
    @Autowired
    private IRationLibService rationLibService;

    @Override
    public void init() {
        boolean success = initIndices();
        if (success) {
            initTypes();
        }

    }

    protected boolean initIndices() {

        return true;
    }

    protected boolean initTypes() {
        return true;
    }

    @Override
    public String insert(String index, String type, Map<String, Object> map) {
        IndexResponse response = transportClient.prepareIndex(index, type).setSource(map).get();
        return response.getId();
    }

    @Override
    public String delById(String index, String type, String id) {
        DeleteResponse res = transportClient.prepareDelete(index, type, id).get();
        return res.getResult().toString();
    }


    /**
     * @param indexName
     * @param typeName
     * @param fields
     * @param fieldsMap
     * @return
     */
    @Override
    public boolean createMapping(String indexName, String typeName, Map<String, ElasticFieldTypeEnum> fields, Map<String, Map<String, ElasticFieldTypeEnum>> fieldsMap) {
        boolean existsType = isExistsType(indexName, typeName);
        if (existsType) {
            return true;
        }
        XContentBuilder mapping = null;
        try {
            mapping = jsonBuilder()
                    .startObject()
                    .field("dynamic", false)
                    //strict
                    .startObject("properties");
            for (String fieldName : fields.keySet()) {
                setMapping(fieldName, fields.get(fieldName), mapping, fieldsMap.get(fieldName));
            }
            mapping.endObject()
                    .endObject();
            PutMappingRequest request = Requests.putMappingRequest(indexName).type(typeName).source(mapping);
            PutMappingResponse response = transportClient.admin().indices().putMapping(request).actionGet();
            return response.isAcknowledged();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean createMapping(String index, String type, String json) {
        boolean existsType = isExistsType(index, type);
        if (existsType) {
            return true;
        }
        PutMappingRequest request = Requests.putMappingRequest(index).type(type).source(json);
        PutMappingResponse response = transportClient.admin().indices().putMapping(request).actionGet();
        return response.isAcknowledged();
    }


    @Override
    public boolean delIndex(String indexName) {
        DeleteIndexResponse dResponse = transportClient.admin().indices().prepareDelete(indexName)
                .execute().actionGet();
        return dResponse.isAcknowledged();
    }

    @Override
    public boolean createIndex(String index, int shardNum, int replicaNum) {
        if (isExistsIndex(index)) {
            return true;
        }
        CreateIndexRequestBuilder prepareCreate = transportClient.admin().indices().prepareCreate(index);
        Map<String, Integer> map = new HashMap<>();
        map.put("number_of_shards", shardNum);
        map.put("number_of_replicas", replicaNum);

        prepareCreate.setSettings(map);

        CreateIndexResponse response = prepareCreate.execute().actionGet();
        return response.isAcknowledged();
    }

    public boolean createIndex(String indexName, String json) {
        CreateIndexRequestBuilder req = transportClient.admin().indices().prepareCreate(indexName);
        req.setSettings(json);
        CreateIndexResponse res = req.get();
        return res.isAcknowledged();
    }


    /**
     * 判断索引是否存在
     *
     * @param indexName
     * @return
     */
    @Override
    public boolean isExistsIndex(String indexName) {
        IndicesExistsResponse response =
                transportClient.admin().indices().exists(
                        new IndicesExistsRequest().indices(new String[]{indexName})).actionGet();
        return response.isExists();
    }


    /**
     * 判断类型是否存在
     *
     * @param indexName
     * @param indexType
     * @return
     */
    @Override
    public boolean isExistsType(String indexName, String indexType) {
        TypesExistsResponse response =
                transportClient.admin().indices()
                        .typesExists(new TypesExistsRequest(new String[]{indexName}, indexType)
                        ).actionGet();
        return response.isExists();
    }


    @Override
    public Page fullSearch(ElasticReq req, String[] indices, String[] fields) {

        String[] indexNames = changeIndexName(indices);

        SearchRequestBuilder searchRequestBuilder = transportClient.prepareSearch()
                .setIndices(indexNames)
                .setFrom(req.getOffset()).setSize(req.getPageSize())
                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);

        QueryStringQueryBuilder queryBuilder = new QueryStringQueryBuilder(StringUtil.replaceSpecialStr(req.getKw()));
        queryBuilder.analyzer(ElasticConstant.ANALYZER_IK_SMART);
        for (String field : fields) {
            queryBuilder.field(field).field(field + ".pinyin");
        }
        searchRequestBuilder.setQuery(queryBuilder);

        HighlightBuilder hiBuilder = new HighlightBuilder();
        hiBuilder.preTags("<span class=\"" + StringUtil.getDefaultStr(req.getTextClass(), ElasticConstant.DEFAULT_TEXT_CLASS) + "\">");
        hiBuilder.postTags("</span>");
        for (String field : fields) {
            hiBuilder.field(field);
        }
        searchRequestBuilder.highlighter(hiBuilder);

        // 执行搜索,返回搜索响应信息
        SearchResponse response = searchRequestBuilder.execute()
                .actionGet();

        Page pageResult = new Page();
        SearchHits hits = response.getHits();
        pageResult.setTotalCount(Integer.valueOf("" + hits.getTotalHits()));
        pageResult.setCurrentPage(req.getPage());
        pageResult.setPageSize(req.getPageSize());
        pageResult.setResult(getPageResult(hits));
        return pageResult;
    }

    /**
     * 根据当前环境为索引加后缀
     *
     * @param indices
     */

    private String[] changeIndexName(String[] indices) {
        int len = indices.length;
        String[] arr = new String[indices.length];
        for (int i = 0; i < len; i++) {
            arr[i] = indices[i].endsWith(env) ? indices[i] : indices[i] + "_" + env;
        }
        return arr;
    }

    @Override
    public Integer batchAdd(List<Map<String, Object>> list, String index, String type) throws IOException {
        //本次导入的最大id
        int maxId = 0;
        if (list.size() == 0) {
            return maxId;
        }
        int maxCount = this.getMaxBatchCount();

        BulkRequestBuilder bulkRequest = transportClient.prepareBulk();
        //导入失败统计
        List<BulkItemResponse> failItems = new ArrayList<>();
        BulkResponse bulkResponse = null;
        int cur = 0;
        Integer id = null;
        String idStr = "";
        for (Map<String, Object> objMap : list) {
            cur++;
            if (objMap.get("id") != null) {
                idStr = objMap.get("id").toString();
                id = Integer.valueOf(idStr);
                maxId = maxId < id ? id : maxId;
                bulkRequest.add(transportClient.prepareIndex(index, type, idStr).setSource(getSourceBuilder(objMap)));
            } else {
                bulkRequest.add(transportClient.prepareIndex(index, type).setSource(getSourceBuilder(objMap)));
            }
            if (cur % maxCount == 0) {
                bulkResponse = bulkRequest.execute().actionGet();
                if (bulkResponse.hasFailures()) {
                    failItems.addAll(Arrays.asList(bulkResponse.getItems()));
                }
            }
        }
        bulkResponse = bulkRequest.execute().actionGet();
        if (bulkResponse.hasFailures()) {
            failItems.addAll(Arrays.asList(bulkResponse.getItems()));
        }
        return maxId + 1;
    }

    /**
     * @param listMap
     */
    //额外设置用户名称
    protected void setUserName(List<Map<String, Object>> listMap) {
        Map<String, String> nameMap = new HashMap<>();
        String userid = null;
        for (Map<String, Object> objectMap : listMap) {
            userid = StringUtil.getDefaultStr(objectMap.get("createby"), Constant.SYS_USER);
            if (nameMap.containsKey(userid)) {
                objectMap.put("createuser", nameMap.get(userid));
                continue;
            }
            //数据库获取
            User user = getUser(Integer.parseInt(userid));
            if (user != null) {
                nameMap.put(userid, user.getChName());
                objectMap.put("createuser", user.getChName());
            }
        }
    }

    //数据库获取用户
    protected User getUser(Integer userid) {
        User user = new User();
        user.setId(userid);
        return userService.loadEntity(user);
    }

    protected int getMaxBatchCount() {
        return this.maxBatchCount > 0 ? this.maxBatchCount : 3000;
    }

    @Override
    public Set<SuggestVO> getSuggestName(List<ESSearchIndex> searchIndexList, int size) {
        Set<SuggestVO> list = new HashSet<>();
        MultiSearchRequestBuilder multiSearch = transportClient.prepareMultiSearch();
        for (ESSearchIndex searchIndex : searchIndexList) {
            SearchRequestBuilder srb = getSearchRequestBuilder(searchIndex, ElasticConstant.SUGGEST_NAME, size);
            multiSearch.add(srb);
        }
        MultiSearchResponse multiResponse = multiSearch.get();
        for (MultiSearchResponse.Item item : multiResponse) {
            SearchResponse response = item.getResponse();
            if (response == null) continue;

            Terms agg = response.getAggregations()
                    .get(ElasticConstant.SUGGEST_NAME);
            for (Terms.Bucket entry : agg.getBuckets()) {
                SuggestVO vo = new SuggestVO();
                vo.setKeyword(entry.getKeyAsString());
                vo.setCount(Integer.valueOf(entry.getDocCount()+""));
                list.add(vo);
            }
        }
        return list;
    }

    /**
     * 获取当个搜索条件
     *
     * @param size
     * @param searchIndex
     * @return
     */
    private SearchRequestBuilder getSearchRequestBuilder(ESSearchIndex searchIndex, String aggName, int size) {
        QueryStringQueryBuilder query = QueryBuilders.queryStringQuery(searchIndex.getKw())
                .analyzer(ElasticConstant.ANALYZER_IK_MAX_WORD);

        SearchRequestBuilder srb = transportClient
                .prepareSearch(searchIndex.getIndexName() + "_" + env)
                .setTypes(searchIndex.getTypeNames())
                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
//                    .setQuery(boolQuery)
                .setQuery(query)
                .setSize(0);
        TermsAggregationBuilder termsAgg = AggregationBuilders
                .terms(aggName);
        termsAgg.field(searchIndex.getAggsFieldName());
        TermsAggregationBuilder top = termsAgg
                .subAggregation(AggregationBuilders.topHits("top"))
                .size(size);
        srb.addAggregation(top);
        return srb;
    }

    /**
     * 留给子类具体实现
     *
     * @param
     * @return
     * @throws IOException
     */
    protected XContentBuilder getSourceBuilder(Map<String, Object> objMap) throws IOException {
        XContentBuilder xContentBuilder = jsonBuilder().startObject();
        for (String s : objMap.keySet()) {
            if (!StringUtils.isEmpty(objMap.get(s))) {
                xContentBuilder.field(s, objMap.get(s));
            }
        }
        xContentBuilder.endObject();
        return xContentBuilder;
    }


    /**
     * @param size
     * @return
     */
    protected SearchRequestBuilder getSearchRequest(int page, int size) {
        int start = (page - 1) * size;
        return transportClient.prepareSearch()
                .setFrom(start > 0 ? start : 0).setSize(size);
    }

    /**
     * 获取查询结果集
     *
     * @param hits
     * @return
     */
    protected List<Map<String, Object>> getPageResult(SearchHits hits) {
        List<Map<String, Object>> list = new ArrayList<>();
        for (SearchHit searchHitFields : hits.getHits()) {
            list.add(getHightLightObj(searchHitFields));
        }
        return list;
    }

    /**
     * 替换高亮字段
     *
     * @param searchHit
     * @return
     */
    protected Map<String, Object> getHightLightObj(SearchHit searchHit) {
        StringBuilder builder;

        Text[] fragments;
        Map<String, Object> source = searchHit.getSourceAsMap();
        source.put("index", searchHit.getIndex());
        source.put("type", searchHit.getType());
        Map<String, HighlightField> highlightFields = searchHit.getHighlightFields();
        for (String s : highlightFields.keySet()) {
            builder = new StringBuilder(30);
            HighlightField field = highlightFields.get(s);
            fragments = field.fragments();
            for (Text fragment : fragments) {
                builder.append(fragment);
            }
            source.put(s, builder.toString());
        }
        setAttrInfo(source);
        return source;
    }

    /**
     * 设置其他属性
     *
     * @param source
     */
    private void setAttrInfo(Map<String, Object> source) {
        String type = StringUtil.cutNull(source.get("type"));
        switch (type) {
            case ElasticConstant.TYPE_PROJECT_BQITEM:
                addProjectInfo(source);
                break;
            case ElasticConstant.TYPE_MATPRICE_MATERIAL:
                addRationPath(source);
                break;
        }

    }

    /**
     * 清单设置项目属性
     *
     * @param objMap
     */
    protected void addProjectInfo(Map<String, Object> objMap) {
        if (objMap.get("projectid") == null) {
            return;
        }
        ProjectBaseInfo projectBaseInfo = new ProjectBaseInfo();
        projectBaseInfo.setId(Integer.valueOf(objMap.get("projectid").toString()));
        projectBaseInfo = projectBaseInfoDao.loadEntity(projectBaseInfo);
        objMap.put("projectinfo", projectBaseInfo);
    }

    /**
     * 财价库添加设置路径名称
     *
     * @param objectMap
     */
    protected void addRationPath(Map<String, Object> objectMap) {
        String subcid = StringUtil.cutNull(objectMap.get("subcid"));
        if (StringUtil.isNotEmpty(subcid)) {
            objectMap.put("rationPath", rationLibService.getLevelNames(subcid));
        }

    }


    /**
     * 设置字段属性
     *
     * @param fieldName
     * @param fieldType
     * @param mapping
     * @param fields
     * @throws IOException
     */
    private void setMapping(String fieldName, ElasticFieldTypeEnum fieldType, XContentBuilder mapping,
                            Map<String, ElasticFieldTypeEnum> fields) throws IOException {
        if (StringUtils.isEmpty(fieldName)) {
            return;
        }
        mapping.startObject(fieldName);
        switch (fieldType) {
            case BOOLEAN:
                mapping.field("type", "boolean");
                break;
            case SHORT:
                mapping.field("type", "short")
                        .field("index", ElasticConstant.ANALYZER_NOT_ANALYZED);
                break;
            case INTEGER:
                mapping.field("type", "integer")
                        .field("index", ElasticConstant.ANALYZER_NOT_ANALYZED);
                break;
            case DOUBLE:
                mapping.field("type", "double");
                break;
            case LONG:
                mapping.field("type", "long");
                break;
            case KEYWORD:
                mapping.field("type", "keyword");
                addFields(fields, mapping);
                break;
            case TEXT_NO_ANALYZED:
                mapping.field("type", "text")
                        .field("fielddata", true)
                        .field("index", ElasticConstant.ANALYZER_NOT_ANALYZED);
                addFields(fields, mapping);
                break;
            case TEXT_IK_SMART:
                mapping.field("type", "text")
                        .field("fielddata", true)
                        .field("analyzer", ElasticConstant.ANALYZER_IK_SMART)
                        .field("search_analyzer", ElasticConstant.ANALYZER_IK_SMART);
                addFields(fields, mapping);
                break;
            case TEXT_IK_MAX_WORD:
                mapping.field("type", "text")
                        .field("fielddata", true)
                        .field("analyzer", ElasticConstant.ANALYZER_IK_MAX_WORD)
                        .field("search_analyzer", ElasticConstant.ANALYZER_IK_SMART);
                addFields(fields, mapping);
                break;
            case TEXT_PINYIN:
                mapping.field("type", "text")
                        .field("analyzer", ElasticConstant.ANALYZER_PINYIN);
                addFields(fields, mapping);
                break;
            case IP:
                mapping.field("type", "ip");
                addFields(fields, mapping);
                break;
            case DATE:
                mapping.field("type", "date")
                        .field("index", ElasticConstant.ANALYZER_NOT_ANALYZED)
                        .field("format", "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd'T'HH:mm:ss.SSSZ||yyyy-MM-dd||epoch_millis");
                break;
            default:
                mapping.field("type", "text")
                        .field("index", ElasticConstant.ANALYZER_NOT_ANALYZED);
                addFields(fields, mapping);
                break;
        }
        mapping.endObject();
    }

    /**
     * 添加 字段里面fields 内容
     *
     * @param map
     * @param mapping
     * @throws IOException
     */
    private void addFields(Map<String, ElasticFieldTypeEnum> map, XContentBuilder mapping) throws IOException {
        if (map != null && map.size() > 0) {
            mapping.startObject("fields");
            for (String fileName : map.keySet()) {
                setMapping(fileName, map.get(fileName), mapping, Collections.EMPTY_MAP);
            }
            mapping.endObject();
        }

    }
}
