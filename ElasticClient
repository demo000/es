package com.concom.yunzq.client;

import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.transport.client.PreBuiltTransportClient;
import org.elasticsearch.xpack.client.PreBuiltXPackTransportClient;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import java.net.InetAddress;
import java.net.UnknownHostException;

@Component
public class ElasticClient implements DisposableBean {
    @Value("${elastic.xpack.security.user}")
    private String xpackUser;

    @Value("${elastic.clusterName}")
    private String clusterName;
    @Value("${elastic.uris}")
    private String uris;
    @Value("${elastic.hasXpack}")
    private boolean hasXpack;
    @Value("${elastic.xpack.uris}")
    private String xpackUris;

    private TransportClient client;

    @Bean
    public TransportClient getClient() throws UnknownHostException {
        Settings settings = null;
        TransportClient client = null;
        //开发环境连mr.p
        if (hasXpack) {
            settings = Settings.builder()
                    .put("client.transport.sniff", true)
                    .put("cluster.name", clusterName).build();
            client = new PreBuiltTransportClient(settings);
            for (String s : xpackUris.split(",")) {
                String[] split = s.split(":");
                client.addTransportAddress(new TransportAddress(InetAddress.getByName(split[0]), Integer.valueOf(split[1])));
            }
        } else {
            settings = Settings.builder().put("cluster.name", clusterName)
                    .put("xpack.security.transport.ssl.enabled", false)
                    .put("xpack.security.user", xpackUser)
                    .put("client.transport.sniff", true).build();

            client = new PreBuiltXPackTransportClient(settings);
            for (String s : uris.split(",")) {
                String[] split = s.split(":");
                client.addTransportAddress(new TransportAddress(InetAddress.getByName(split[0]), Integer.valueOf(split[1])));
            }
        }

        return client;
    }

    @Override
    public void destroy() throws Exception {
        if (client != null) {
            client.close();
        }
    }
}
